//: annotations/Testable.java
package annotations;

import net.atunit.*;


/****
 * 注解 （也被称为元数据）为我们在代码中添加信息提供了一种形式化的方法，使我们可能在稍后的某个
 * 时刻非常方便的使用这些数据
 * 注解在一定程度上是在把元数据与源代码文件结合在一起，而不是保存外部文档中这一大趋势之下催生
 * 的，同时，注解也是对来自像C#之类的其他的语言对Java造成的语言特性压力所做出的一种回应
 * 注解是众多引入Java Se5中的重要的语言变化之一，它们可以提供完整的描述程序所需的信息，而这些信息是无法
 * 用java来表达的，因此，注解使我们能够以将由编译器来测试和验证的格式，存储有关的程序的额外信息，注解的负担
 * ，通过使用注解，我们可以将这些元数据保存在Java源代码中，并利用annotation API 为自己的注解构造处理工具
 * ，同时，注解的优点还包括，更加的干净易读的代码以及编译期类型检查等，虽然Java SE5 预先定义了一些元数据，
 * 但是一般来说，主要还是需要程序员自己添加新的注解，并且按自己的方式使用它们。
 *
 * 注解的语法比较简单，除了@符号使用之外，它的基本与java固有的语法一致，java SE5 内置了三种，定义在java.lang中的注解
 *
 *
 * @Overide ，表示当月前的方法定义将覆盖超类中的方法，如果你不小心拼写错误，或者方法签名对不上被覆盖的方法，编译器就会发
 * 出错误的提示
 *
 * @DepreCated 如果程序员使用了注解为它的元素，那么编译器就发出警告信息
 * @SupperessWarnings ，关闭不当的编译器警告信息，在Java SE5 之前的版本中，也可能使用这个注解，不过会被忽略掉
 * Java 不另外的提供了四种注解，专门的负责新的注解的创建，稍后我们会学习它们。
 * 每当你创建描述符性质的类或新接口时，一旦其中包括了重复性的工作，那就可以考虑使用注解来简化与自动化该过程，例如在
 * Enterprise JavaBean 中存在许多的额外的工作，就是使用注解消除他们
 * 注解的出现 ，可能替代某些现存的系统，例如XDoclet ,它是一个独立的文档工具，专门设计用来生成类的注解一样的文档，与之
 * 相比，注解真正的语言级的概念，一旦构造出来，就亨有编译期的类型检查保护，注解使得代码更整洁，且便于维护，通过使用扩展
 * 的annotationapi,或外部字节码工具类库，稍后你将会看到，程序员的拥有对源代码的强大的检查与操作能力。
 *
 *
 *
 * 基本语法
 * 在下面的例子中，使用@Test 对testExecute() 方法进行注解，该注解本身并不做任何的事情，但是编译器要确保在其构造
 * 路径上必须有@Test注解的定义。你将在本章中可能看到，程序员可以创建一个通过反射机制来运行的testExcute()方法的工具
 *
 *
 * 被注解的方法与其他的方法没有区别，在这个例子中，注解@test可以与任何的，可能看到，注解的定义看起来很像接口定义，事实上
 * ，与其他的任何的接口一样，注解也将会编译成class文件
 *
 *
 *
 *
 *
 *
 *
 */
public class Testable {
  public void execute() {
    System.out.println("Executing..");
  }
  @Test
  void testExecute() { execute(); }
} ///:~
