2003年年初，笔者在国外工作，其时，一位与怎么都私交甚好的印度同事 Paradeep 从公司离职去斯坦福深造，临走送给笔者一本他最钟爱的书籍作为纪念
工作间隙，时常见他摩挲此书，摇头不止，印度人习惯和中国人的相反，摇头表示的是肯定，赞同，相当于中国人的点头，笔者刚开始与印度同僚黄共事之时，每每组织项目会议
，一屋子的人频频摇头，让笔者倍感压力。。。。
笔者夹着这本书在回家的路上，恰巧路过东海岸，天色依然明朗，
随意坐上了海边的一家酒吧的露天吧台，要了杯啤酒，随手翻弄着书的扉页，不经意看见书中的遍布了钢笔勾画的线条
呵呵，paradeep 这个家伙，还真将这本书当回事的啊，一边笑着，一边摊开书的扉页，不经意的看见这本书是如何让这个这样的一个聪明老练的同事如此欣赏
从此开始，这本书伴随着笔者度过整整一个月的业余时间.....
这本书就是出自Rod Johnson 的
此书已经由电子工业出版社，译版名为 javaEE 设计开发编程指南
半年以后，一个新的java frame发布，同样的出版 rod johnso 的手笔，这个自然引起了笔者的极大的兴趣，这就是 Spring Framework
SpringFrameWork 实际上是 Expert One-on_on java EE DEsign and Development 一书中所阐述的设计思想的具体的实现，在 One-to-One 一书中，Rondjonnos 倡导 J2EE 实用主义的思想，并
出Jop这个自然的引起我极大的兴趣，就是 SpringFramework 发布，同样的了出自 rodJohnson 的手笔的，这自己的引起笔者的极大的兴趣，这就是 Spring Framework
SpringFramework 实际上是一个 Expert One-on-One，j2ee Design and Devolopment 一书中所阐述的一设计思想一样，并随书提供了一个初步实的开发框架实现，而 Spring FrameWorker,正是这一个思想
并全面的具体的实现体现，RodJohnso 在 interface21开发包的基本上，进行了进一步的改造，和扩充，使其发展为一个更加开放的，清晰的，高效的开发框架
本文正是针对 SpringFrameWork 的开发指南，讲述了 SpringFrameWork 的设计思想以及开发中的实际使用，同时穿插了一些笔者在项目中的实作中的经验所得
Spring 彩用了 Apache common_logging，并结合 Apathch log4j 作为日志输出组件，为了在调试过程中能观察到 Spring 的日志输出，在 ClassPath 中新建一个 log4.propeties 配置文件
内容如下
配置完成，项目结构如下图所示
示例的基础的代码如下所示
示例完成
很简单的示例，的确很简单，甚至简单到不够真实
不过大家从这个最简单的例子中看出了什么，真的只是打印输出了两行代码并没有出现了 Spring 任何组件
UpperAction 和 LowerAction 的 message 属性均由 spring 通过读取配置文件动态配置，
客户代码，这里就是我们的测试代码，仅仅面向接口编程，而无需知道实现类的具体的名称，同时，我们可以很简单的通过修改配制文件切换具体的底层实现类
下面这些据说的，这些，对于我们实际开发有何帮助
首先，我们的组件 并不需要实现框架指定的接口，因此可以轻松的将组件从 Spring 脱离，甚至不需要任何修改，这在基于 EJB 框架实现的应用中是难以想象的
其次是组件的间的依赖关系减少，极大的改善了代码的可重用性，
Spring 依赖注入机制，可以在运行期为配置所需要的资源，而无需在编写组件代码时就加以指定，从而在相当程序上降低了组件之间的耦合
上面的例子中，我们通过 Spring 运行期为组件配置所需要的资源，而无需在编写组件代码时就加以指定，从而在相当的程序上降低了组件之间的耦合
上面的例子中，我们通过 Spring，在运行期间动态的将字符串，Hello ,注入到了 Action 实现类的 Message 中
现在我们假设回到了传统的实现模式，应该如何处理呢
一般在处理办法上也就是编写一个 Heper类，辅助类，来完成配置文件的读写功能，然后在和个 Action 的构造函数中，调用这个 Helper 类设置 message 属性的值
此时，我们的组件就与这个 Helper 类库建立的依赖关系，之后我们需要在其他的系统中重用这个组件的话，就必须连同这个Helper 类库并一移植，实际开发中，依赖关系住住并非如此简单
组件与项目的基层代码之间的复杂关联，使得组件重用性大大的下降
Spring 通过依赖注入模式，将依赖关系从编码中脱离出来，从而大大的降低了组件之间的耦合，实现了组件之间的真真意义上的即用，这也是 Spring 最具价值的特性之一
面向接口编程
诚然，即使没有 Spring，实现面向接口的设计也关不困难，Spring 面向接口的通过实现接口的设计也不是困难的，Spring面向接口的设计意义在于它为面积接口的编程提供了一个更加自然的平台
，基于 Spring 开发，程序员自然的倾向于使用接口来定义不同层次之间的关系，这种自发的倾向性，来自于 Spring 所提供的简单的传统的编码过程中，引入一个接口，往往是传统编码过程中引入一个接口
，往往也意味着同时要引入 一个 Factor类，也许还有一个额外的配制文件的读写代码
既然 Spring 给我们带来这么多的好处，那么，反过来，让我们试想一下，如果不使用 Spring框架，回到我们传统的编码模式，也许正是目前的编码的模式，情况会怎样
对于上例而言，我们需要怎样实现相同的功能
上面的 Actino 接口的及其两个实现类 UpperActon 和 LowerAction 都和 Spring无关，可以保留面调用 Action 测试代码，如果要实现同样的功能，应该如何编写
于是我们实现了一个且不论实现质量的好坏，总之通过上面新增一个20行代码来，我们实现了类似的功能，如果不引入BeanUtil，而采用手工编写 Reflection 代码完成发生的设置的话，显然代码将远远不止20行
好吧，现在有个需要，这个 ActionFactory 每次都新建一个类的实例，这对系统发到而Spring 的出现，则大大的缓解这样的窘境，通过对编码问题的分解和抽象，Spring 提供了一套成熟而全面的基本框架
，随着本篇的进展，大家可以看到，上面的这些开发常见的问题在 Spring 框架中都提供了统一的，妥善的处理机制，这为烦杂的应用开发提供了相当的有力的支持
这里暂且抛开 Spring Framework 在设计上相当的表现不谈，站在应用开发的实际角度来说，其最大的优势就是，Spring是一个从实际项目上开发经验中抽取的，可高度的重视应用框架，认识到这一点非常重要
Spring Framwork 目前最引人注意的就是，也就是控制反转，或者依赖注入的设计思想，这的确是相当的优秀的设计理念，但是这是一个单纯的设计模式并不能使用是 Spring 如此成功，而 Spring 最成功的地方
也并不仅仅于采用了。
IOC/DI 的设计，我们前面示例中的 ActionFactory，勉强也可算做是一个 IOC/DI 设计的实现，但是如何
可能相关的技术媒体和不明就里的技术追随对于 DI/IOC 容器的过分炒作，在某个程序上的误导了初学者的视线，控制反转，这显然不是一个能望文知意的好名称，依赖注入，也好不到哪里去，也正因为这样不少
初学者将 Spring 的生涩的所谓控制反转和依赖注入，看作一个懵懂的高级概念而供上神龛
而实际上，Spring 笔者所见过的，最具实际意义的 java 开发机制，这绝非一个高级概念玩具，而是一个切实际的，能实实在在的帮助我们改善系统设计的好帮手
首先，Spring 涵盖了应用系统开发所涉及大多数技术范畴，包括 MVC,ORM，以及 Remote Interface等。这些系统贯穿了大多数的技术范畴，包括 MVC，ORM以及 Remote Interface Spring 从开发者
Spring 开发技术内容进一步的封装和抽象，使得应用开发 更加简便，在笔者的开发工作中，借助 Spring 从开发都的角度对这些技术内部进行了进一步的封装和抽象，使得应用开发更为简便，
在笔者的开发工作中借助 Spring 提供了丰富的类库，相对传统的开发模式，大大的节省了编码量，平均1/3强，对于 ORM和 remote 导也许更多
其次，Spring 并非一个强制性框架，它提供了很多独立的组件可供选择的，如笔者在一些项目中，就仅仅引用了 Spring的 ORM 模板的机制对数据存层进行处理，并取得了相当的理想的效果开发
评定一个框架是否优良的条件固然有多种，但笔者认为，对于应用系统开发而言，我们面临着来自诸多方面的压力，此时，最能提高生产力的技术，也就是最有价值的技术，很高兴，Spring 让笔者找到了这样的感觉
笔者对 Rod Johnoson 最为钦佩的，并不是他用了 IOC 或者 DI,而是他对 J2EE应用开发很高兴，Spring 让笔者找到了这样的感觉
笔者对 Rod Johnoson最为钦佩的，产薄是他用的 IOC 或者 DI,而是他对 J2EE 应用开发的透彻的理解
何谓控制反转，IoC=Inversion of Control正如好在我们也同时拥有 Internet 这个最广博的你信息来源，何谓控制反转，何谓依赖注入，DI=Dependency Injection 对于初次接触这些概念初学者，
不象会一头雾水，正如笔者第一次看到这些名词一样，一阵窘迫，IT界不亏是哄抢行业，每个新出现的语汇，好丰我们也同时拥有 Internet 这个广博的信息来源
IOC，用白话来讲，就是由容器控制程序之间的关系，而非传统实现，由程序代码直接操控信息来源
IoC，用白话来讲，就是由容器控制程序之间的关系，ioc 用白话来讲，就是由容器控制程序之间的关系，而非传统的实现中，由于程序代码直接操控，这也是所谓的控制反转，
的概念所在，控制权由应用代码中转到外部容器，控制权的转移，所谓的反转
正在业界的 IOC 争吵不休时，大师级的人物 MartinFowler 也站出来发话，以一经典的文章<Inversion of Control Contaainers and Thre Depedneccy Injection pattern 为
IoC正名至此，IOC 以获得了一个新的名字，依赖注入，Dependency Injection
相对于 Ioc而言，依赖注入，的确更加准确的描述了这种古老而又时兴的设计理念，从名字上理解，所谓的信号注入，即组件之间的依赖关系由容器在运行其决定，形象的来说，即由容器为
为会么称为古老而又时兴的设计理念，至于时兴自然不必多费唇舌，看看国内的外的大小论坛上 ivxf 的讨论主题便知，至于古老，相信大家对下面的图片中的设备不会陌生。为什么称这为
相对于 Ioc 而言，依赖注入的的有更加总会有的描述了这种古老而又时深的设计理念，从名字上理解，所谓的依赖注入，即组件之间的依赖关系由容器在运行期决定，形象的来说，即容器的动态的将某种
依赖关系注入到组件中为什么称为古老而又时兴，的设计理念，至于时兴自然不必多费
其中 SampleDAO中 dataSource 将由容器在运行期动态注入，而 DataSource 的具体配置和初始化工作将由容器在运行
    的 dataSource将由容器在运行期动态注入，而 DataSource 的具体的配置的和初始化工作将由容器在运行其完成
    对比传统的实现方式，如果通过编码方式初始化 DataSource 实例，我们可以看到，基于依赖注入的系统实现相当的灵活简洁
    通过依赖入机制，我们只需要通过简单的配置，而无需任何代码就指定 SampleData完成逻辑，而不用关心具体的资源的自休息，由难实现对比传统的datasource 实例，
    我们可以看球，基于依赖注入的系统实现相当的灵活简洁，通过依赖注入的机制，我们只需要通过简单的配置，而无需任何代码就可以指定sameleDato中所需的
 通过依赖注入机制，我们只需要通过简单的配制，而无需任何代码就可以手术室 SampleDAta 所需要的
 上面的实例中， 我们假设 SamepleData是一个运动的 j2EE 容器的组件，如 weblogic，在运行其通过 JNDI 从容器上获取Data实例
 现在假设我们部署的环境发生了变化，系统需要的脱离应用服务器独立运行，这样的，由于失去的容器支持，原本通过 JNDI 获取 的 DataSource 的方式不再有效，我们需要如何修改
 以适应新系统的环境，很简单，我们只需要修改 DAtaSource 的配置
 这里我们 dataSurce 改为由 Apache DBCP 组件提供，没有编写任何代码的我们即实现了 DataSource 的 avra，回想传统的编码模式中，如果要进行同样的修改，我们需要付出多大的努力
 依赖注入的机制减轻我组件之间的依赖关系，同时也大大的提高了组件的可移值性，这意味着，组件得到我不用的机会将会更多
 依赖注入的几种实现方式
 上面的代码中，ClassA 依赖于 InterFAceB 的实现，如果获取 InterfaceB 实现类的实例，传统方法是在代码中创建 InterFaceB 实现类的实例，并将于是有了上面的代码，我们于是有了上面的代码，
 我们根据预先在配置文件中设定的实现类的类名，动态的加载实现类，并通过 InterfaceB 强制转型后为 ClassA 所用
 这这就是接口注入的一个最原始的雏形
 而对于一个 Type1 型的一个最原始的雏形
 而这样一来，Class在




























